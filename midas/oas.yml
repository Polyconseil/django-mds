openapi: '3.0.1'
info:
  description: Mobile Data Specification
  title: MDS API
  version: '0.0.dev0'
components:
  schemas:
    uuid:
      type: string
      format: uuid
      example: 77dfeb1e-6fac-45ba-9a69-aeae606bb28e
    geometry:
      externalDocs:
        description: "GeoJSON (RFC 7946)"
        url: "https://tools.ietf.org/html/rfc7946#section-3.1"
      type: object
      required: [type, coordinates]
      discriminator: {propertyName: type}
      properties:
        type:
          type: string
          enum:
          - Point
          - LineString
          - Polygon
          - MultiPoint
          - MultiLineString
          - MultiPolygon
    position:
      type: array
      items: {type: integer, minItems: 2, maxItems: 3}
    Point:
      allOf:
      - $ref: "#/components/schemas/geometry"
      - type: object
        properties:
          coordinates: {$ref: "#/components/schemas/position"}
        example:
          type: Point
          coordinate: [-118.2843063056015, 34.06371498771665]
        externalDocs:
          description: "GeoJSON Point (RFC 7946)"
          url: "https://tools.ietf.org/html/rfc7946#section-3.1.2"
    ring:
      type: array
      items:
        allOf:
        - $ref: "#/components/schemas/position"
        - minItems: 4
    Polygon:
      allOf:
      - $ref: "#/components/schemas/geometry"
      - type: object
        properties:
          coordinates:
            type: array
            items:
              allOf:
              - $ref: "#/components/schemas/ring"
              - minItems: 1
        externalDocs:
          description: "GeoJSON Polygon (RFC 7946)"
          url: "https://tools.ietf.org/html/rfc7946#section-3.1.6"
      example:
        type: Polygon
        coordinate: [[
          [-118.2843063056015, 34.06371498771665],
          [-118.2842040002129, 34.06370000073153],
          [-118.2841039999419, 34.06367000044555],
          [-118.2843063056015, 34.06371498771665]
        ]]
    gps-point:
      type: object
      properties:
        type: {type: string, enum: [Feature]}
        geometry: {$ref: "#/components/schemas/Point"}
        properties:
          type: object
          properties:
            gsm:
              type: object
              properties:
                timestamp: {type: string, format: date-time}
                operator: {type: string}
                signal: {type: number, minimum: 0, maximum: 1}
            gps:
              type: object
              properties:
                timestamp: {type: string, format: date-time}
                accuracy: {type: number, minimum: 0}
                course: {type: number, minimum: 0, maximum: 360, exclusiveMaximum: true}
                speed: {type: number, minimum: 0}
            vehicle:
              type: object
              properties:
                speed: {type: number, minimum: 0}
                acceleration: {type: number, minimum: 0}
                odometer: {type: integer, minimum: 0}
                driver_present: {type: boolean}
            energy:
              type: object
              properties:
                cruise_range: {type: integer, minimum: 0}
                autonomy: {type: number, minimum: 0, maximum: 1}
    service-area:
      type: object
      required: [id, provider, begin_date, area]
      properties:
        area:
          allOf:
          - $ref: "#/components/schemas/Polygon"
          - description: "GeoJSON Polygon of the area"
        begin_date:
          description: Area availability date
          type: string
          format: date-time
        end_date:
          description: Area end of availability date
          type: string
          format: date-time
        id:
          description: Unique Area identifier (UUID)
          type: string
          readOnly: true
          example: 6a82bcee-da15-4cfa-b43e-2de2f25e001b
        provider:
          description: Unique provider identifier (UUID)
          type: string
          format: uuid
          example: 1e178f8c-9db8-4ccd-bd24-0c4c4f085e58
    vehicle-register:
      type: object
      required: [provider, identification_number, model]
      properties:
        id:
          description: Unique vehicle identifier
          type: string
          format: uuid
          readOnly: true
          example: daad3098-1aa5-447f-9baa-4009fb8c89ec
        provider:
          description: A unique ID identifying the service provider (UUID)
          type: string
          format: uuid
          example: 1e178f8c-9db8-4ccd-bd24-0c4c4f085e58
        identification_number:
          description: VIN (Vehicle Identification Number)
          type: string
        model:
          description: Vehicle model
          type: string
    vehicle-telemetry:
      type: object
      required: [provider, status]
      properties:
        id:
          description: Unique vehicle identifier
          type: string
          format: uuid
          readOnly: true
          example: daad3098-1aa5-447f-9baa-4009fb8c89ec
        provider:
          description: A unique ID identifying the service provider (UUID)
          type: string
          format: uuid
          example: 1e178f8c-9db8-4ccd-bd24-0c4c4f085e58
        status:
          description: Service status
          type: string
          enum: ["available", "unavailable", "reserved", "removed"]
        position:
          allOf:
          - $ref: "#/components/schemas/gps-point"
          - description: "GPS position and telemetry"
    vehicle:
      allOf:
      - {$ref: "#/components/schemas/vehicle-register"}
      - {$ref: "#/components/schemas/vehicle-telemetry"}
paths:
  /service_area/:
    get:
      tags: [service_area]
      parameters: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                  type: array
                  items: {$ref: "#/components/schemas/service-area"}
  /service_area/{id}/:
    delete:
      tags: [service_area]
      parameters:
      - name: id
        in: path
        description: A UUID string identifying this area.
        required: true
        schema: {type: string, format: uuid}
      responses:
        204: {description: Deleted}
    get:
      tags: [service_area]
      parameters:
      - name: id
        in: path
        description: A UUID string identifying this area.
        required: true
        schema: {type: string, format: uuid}
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: {$ref: "#/components/schemas/service-area"}
    put:
      tags: [service_area]
      parameters:
      - name: id
        in: path
        description: A UUID string identifying this area.
        required: true
        schema: {type: string, format: uuid}
      requestBody:
        content:
          application/json:
            schema: {$ref: "#/components/schemas/service-area"}
      responses:
        200: {description: OK}
  /vehicle/:
    get:
      tags: [vehicle]
      parameters: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                  type: array
                  items: {$ref: "#/components/schemas/vehicle"}
  /vehicle/{id}/:
    delete:
      tags: [vehicle]
      parameters:
      - name: id
        in: path
        description: A UUID string identifying this device.
        required: true
        schema: {type: string, format: uuid}
      responses:
        204: {description: Deleted}
    get:
      tags: [vehicle]
      parameters:
      - name: id
        in: path
        description: A UUID string identifying this device.
        required: true
        schema: {type: string, format: uuid}
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: {$ref: "#/components/schemas/vehicle"}
    post:
      tags: [vehicle]
      parameters:
      - name: id
        in: path
        description: A UUID string identifying this device.
        required: true
        schema: {type: string, format: uuid}
      requestBody:
        content:
          application/json:
            schema: {$ref: "#/components/schemas/vehicle-telemetry"}
      responses:
        201: {description: Created}
    put:
      tags: [vehicle]
      parameters:
      - name: id
        in: path
        description: A UUID string identifying this device.
        required: true
        schema: {type: string, format: uuid}
      requestBody:
        content:
          application/json:
            schema: {$ref: "#/components/schemas/vehicle-register"}
      responses:
        200: {description: OK}
